/*! ng-dialog - v0.1.8 (https://github.com/likeastore/ngDialog) */
(function (e, t, n) { "use strict"; var r = t.module("ngDialog", []); var i = t.element; var s = t.isDefined; var o = (document.body || document.documentElement).style; var u = s(o.animation) || s(o.WebkitAnimation) || s(o.MozAnimation) || s(o.MsAnimation) || s(o.OAnimation); var a = "animationend webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend"; r.provider("ngDialog", function () { var n = this.defaults = { className: "ngdialog-theme-default", plain: false, showClose: true, closeByDocument: true, closeByEscape: true }; var r = 0, s = 0, o; this.$get = ["$document", "$templateCache", "$compile", "$q", "$http", "$rootScope", "$timeout", function (f, l, c, h, p, d, v) { var m = f.find("body"); var g = { onDocumentKeydown: function (e) { if (e.keyCode === 27) { y.close() } }, closeDialog: function (t) { if (typeof e.Hammer !== "undefined") { e.Hammer(t[0]).off("tap", o) } else { t.unbind("click") } if (s === 1) { m.unbind("keydown") } if (!t.hasClass("ngdialog-closing")) { s -= 1 } if (u) { t.unbind(a).bind(a, function () { t.scope().$destroy(); t.remove(); if (s === 0) { m.removeClass("ngdialog-open") } }).addClass("ngdialog-closing") } else { t.scope().$destroy(); t.remove(); if (s === 0) { m.removeClass("ngdialog-open") } } d.$broadcast("ngDialog.closed", t) } }; var y = { open: function (u) { function E(e) { if (!e) { return "Empty template" } if (t.isString(e) && f.plain) { return e } return l.get(e) || p.get(e, { cache: true }) } var a = this; var f = t.copy(n); u = u || {}; t.extend(f, u); r += 1; a.latestID = "ngdialog" + r; var b = t.isObject(f.scope) ? f.scope.$new() : d.$new(); var w; h.when(E(f.template)).then(function (n) { n = t.isString(n) ? n : n.data && t.isString(n.data) ? n.data : ""; l.put(f.template, n); if (f.showClose) { n += '<div class="ngdialog-close"></div>' } a.$result = w = i('<div id="ngdialog' + r + '" class="ngdialog-wrapper"></div>'); w.html('<div class="ngdialog-overlay"></div><div class="ngdialog"><div class="ngdialog-content">' + n + "</div></div>"); if (f.controller && t.isString(f.controller)) { w.attr("ng-controller", f.controller) } if (f.className) { w.addClass(f.className) } if (f.data && t.isString(f.data)) { b.ngDialogData = f.data.replace(/^\s*/, "")[0] === "{" ? t.fromJson(f.data) : f.data } b.closeThisDialog = function () { g.closeDialog(w) }; v(function () { c(w)(b); m.addClass("ngdialog-open").append(w) }); if (f.closeByEscape) { m.bind("keydown", g.onDocumentKeydown) } o = function (e) { var t = f.closeByDocument ? i(e.target).hasClass("ngdialog") : false; var n = i(e.target).hasClass("ngdialog-close"); if (t || n) { y.close(w.attr("id")) } }; if (typeof e.Hammer !== "undefined") { e.Hammer(w[0]).on("tap", o) } else { w.bind("click", o) } s += 1; d.$broadcast("ngDialog.opened", w); return y }) }, close: function (e) { var t = i(document.getElementById(e)); if (t.length) { g.closeDialog(t) } else { y.closeAll() } return y }, closeAll: function () { var e = document.querySelectorAll(".ngdialog-wrapper"); t.forEach(e, function (e) { g.closeDialog(i(e)) }) } }; return y }] }); r.directive("ngDialog", ["ngDialog", function (e) { return { restrict: "A", scope: { ngDialogScope: "=" }, link: function (n, r, i) { r.on("click", function (r) { r.preventDefault(); var s = t.isDefined(n.ngDialogScope) ? n.ngDialogScope : "noScope"; t.isDefined(i.ngDialogClosePrevious) && e.close(i.ngDialogClosePrevious); e.open({ template: i.ngDialog, className: i.ngDialogClass, controller: i.ngDialogController, scope: s, data: i.ngDialogData, showClose: i.ngDialogShowClose === "false" ? false : true, closeByDocument: i.ngDialogCloseByDocument === "false" ? false : true, closeByEscape: i.ngDialogCloseByEscape === "false" ? false : true }) }) } } }]) })(window, window.angular)